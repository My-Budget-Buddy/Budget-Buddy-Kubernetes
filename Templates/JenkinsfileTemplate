// TEMPLATE REPLACEMENTS
// <service-name> - the name of the service (i.e. user-service for kubernetes)
// <pascal-service-name> - the name of the service in PascalCase (i.e. UserService for the SonarQube project key)
// <reviewer1>, <reviewer2>, <reviewer3> - the GitHub usernames of the reviewer(s); 1 required for BE, 3 for FE
// <head-branch> - the branch where changes are coming from (i.e. dev)
// <base-branch> - the branch where changes are going to (i.e. main)
pipeline {
  agent {
    kubernetes {
      yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: maven
                image: 924809052459.dkr.ecr.us-east-1.amazonaws.com/maven:latest
                command:
                - "sleep"
                args:
                - "9999999"
              - name: aws-kubectl
                image: 924809052459.dkr.ecr.us-east-1.amazonaws.com/aws-kubectl:latest
                env:
                - name: AWS_REGION
                  valueFrom:
                    secretKeyRef:
                      name: ecr-login
                      key: AWS_REGION
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: ecr-login
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ecr-login
                      key: AWS_SECRET_ACCESS_KEY
                command:
                - "sleep"
                args:
                - "9999999"
              - name: kaniko
                image: 924809052459.dkr.ecr.us-east-1.amazonaws.com/kaniko:latest
                imagePullPolicy: Always
                volumeMounts:
                - name: kaniko-cache
                  mountPath: /kaniko/.cache
                env:
                - name: AWS_REGION
                  valueFrom:
                    secretKeyRef:
                      name: ecr-login
                      key: AWS_REGION
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: ecr-login
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ecr-login
                      key: AWS_SECRET_ACCESS_KEY
                command:
                - sleep
                args:
                - '9999999'
                tty: true
              volumes:
              - name: kaniko-cache
                emptyDir: {}
        '''
      }
    }

    options {
      buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
    }

    // Global Environment Variables
    environment {
        SERVICE_NAME = '<service-name>'
        PASCAL_SERVICE_NAME = '<pascal-service-name>'
        STAGING_DATABASE_URL = 'jdbc:postgresql://postgres:5432/my_budget_buddy/'
        PROD_DATABASE_URL = 'jdbc:postgresql://budgetbuddy-0.c4eqo06kg56i.us-east-1.rds.amazonaws.com/budgetbuddy'
        CLIENT_ID = credentials('GITHUB_APP_CLIENT_ID')
        PEM = credentials('GITHUB_APP_PEM')
        REVIEWER_GITHUB_USERNAMES = '"<reviewer1>", "<reviewer2>", "<reviewer3>"'        
        TEST_BRANCH = '<head-branch>'
        MAIN_BRANCH = '<base-branch>'
    }

    stages {
        // Set namespace
        stage('Set Namespace') {
            steps {
                script {
                    if (env.BRANCH_NAME == "${TEST_BRANCH}") {
                        env.NAMESPACE = 'staging'
                    } else if (env.BRANCH_NAME == "${MAIN_BRANCH}") {
                        env.NAMESPACE = 'prod'
                    }
                }
            }
        }

        // Pull all git dependencies
        stage('Pull Dependencies'){
            steps{
              sh '''
              git clone https://github.com/My-Budget-Buddy/Budget-Buddy-Kubernetes.git
              git clone -b daniel413x/pipeline https://github.com/My-Budget-Buddy/Budget-Buddy-Frontend-Testing.git
              '''
            }
        }

        // Build the project
        stage('Build') {
            when {
                branch 'testing-cohort'
            }

            steps {
                container('maven') {
                    sh 'mvn clean install -DskipTests=true -Dspring.profiles.active=build'
                }
            }
        }
    
        // Set up the database for the staging environment
        stage('Set Up Database for Staging') {
            when {
                branch 'testing-cohort'
            }

            steps {
                container('aws-kubectl') {
                    withCredentials([
                            string(credentialsId: 'STAGING_DATABASE_USER', variable: 'DATABASE_USERNAME'),
                            string(credentialsId: 'STAGING_DATABASE_PASSWORD', variable: 'DATABASE_PASSWORD')])
                    {
                    sh '''
                    aws eks --region us-east-1 update-kubeconfig --name project3-eks
                    
                    # deploy staging db

                    cd Budget-Buddy-Kubernetes/Databases
                    chmod +x ./deploy-database.sh
                    ./deploy-database.sh ${NAMESPACE} $DATABASE_USERNAME $DATABASE_PASSWORD
                    '''
                    }
                }
            }
        }
    
        // Run coverage and analysis for the staging environment
        stage('Test and Analyze for Staging') {
            when {
                branch 'testing-cohort'
            }

            steps {
                container('maven') {
                    withCredentials([
                    string(credentialsId: 'STAGING_DATABASE_USER', variable: 'DATABASE_USER'),
                    string(credentialsId: 'STAGING_DATABASE_PASSWORD', variable: 'DATABASE_PASS')])
                    {
                        sh '''
                            export DATABASE_URL=${STAGING_DATABASE_URL}
                            mvn clean verify -Pcoverage -Dspring.profiles.active=test \
                                -Dspring.datasource.url=$DATABASE_URL \
                                -Dspring.datasource.username=$DATABASE_USER \
                                -Dspring.datasource.password=$DATABASE_PASS
                        '''
                        withSonarQubeEnv('SonarCloud') {
                            sh """
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=My-Budget-Buddy_Budget-Buddy-${PASCAL_SERVICE_NAME} \
                                    -Dsonar.projectName=Budget-Buddy-${PASCAL_SERVICE_NAME} \
                                    -Dsonar.java.binaries=target/classes \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                    -Dsonar.branch.name=testing-cohort
                            """
                        }
                    }
                }
            }
        }

        // Run coverage and analysis for the production environment
        stage('Test and Analyze for Production') {
            when {
                branch 'testing-main'
            }

            steps {
                container('maven') {
                    withCredentials([
                    string(credentialsId: 'PROD_DATABASE_USER', variable: 'DATABASE_USER'),
                    string(credentialsId: 'PROD_DATABASE_PASSWORD', variable: 'DATABASE_PASS')])
                    {
                        sh '''
                            export DATABASE_URL=${PROD_DATABASE_URL}
                            mvn clean verify -Pcoverage -Dspring.profiles.active=test \
                                -Dspring.datasource.url=$DATABASE_URL \
                                -Dspring.datasource.username=$DATABASE_USER \
                                -Dspring.datasource.password=$DATABASE_PASS
                        '''
                        withSonarQubeEnv('SonarCloud') {
                            sh """
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=My-Budget-Buddy_Budget-Buddy-${PASCAL_SERVICE_NAME} \
                                    -Dsonar.projectName=Budget-Buddy-${PASCAL_SERVICE_NAME} \
                                    -Dsonar.java.binaries=target/classes \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                    -Dsonar.branch.name=testing-main
                            """
                        }
                    }
                }
            }
        }
    
        // Build and push the docker image to ECR
        stage('Build and Push Docker Image') {
            steps {
                container('kaniko') {
                    script {
                        def imageTag = 'latest'
                        
                        // Determine the image tag based on the branch
                        // note that the var must nonetheless be exported in the operative shell command
                        if (BRANCH_NAME == 'testing-cohort') {
                        imageTag = 'test-latest'
                        } else if (env.BRANCH_NAME == 'main') {
                        imageTag = 'latest'
                        }

                        sh '''
                        export IMAGE_TAG=''' + imageTag + '''
                        rm -rf /var/lock
                        # Get the ECR login password
                        export ECR_LOGIN=$(aws ecr get-login-password --region $AWS_REGION)
                        if [ -z "$ECR_LOGIN" ]; then
                            echo "Failed to get ECR login password"
                            exit 1
                        fi
                        mkdir -p /kaniko/.docker
                        echo "{\"auths\":{\"924809052459.dkr.ecr.us-east-1.amazonaws.com\":{\"auth\":\"$(echo -n AWS:$ECR_LOGIN | base64)\"}}}" > /kaniko/.docker/config.json
                            echo ${imageTag}
                            
                        /kaniko/executor --dockerfile=Dockerfile.prod --context=dir://. --destination=924809052459.dkr.ecr.us-east-1.amazonaws.com/${SERVICE_NAME}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        // Deploy the service to EKS for staging
        stage('Deploy to EKS for Staging') {
            when {
                branch 'testing-cohort'
            }

            steps {
                container('aws-kubectl') {
                    withCredentials([
                        string(credentialsId: 'STAGING_DATABASE_USER', variable: 'DATABASE_USERNAME'),
                        string(credentialsId: 'STAGING_DATABASE_PASSWORD', variable: 'DATABASE_PASSWORD')])
                    {
                        sh '''
                        aws eks --region us-east-1 update-kubeconfig --name project3-eks

                        # deploy service

                        cd Budget-Buddy-Kubernetes/Deployments/Services
                        # set test image
                        sed -i "s/test-latest/test-latest/" deployment-${SERVICE_NAME}.yaml
                        # set test DB url
                        # note use of | as delimiter because of forward slashes in the url
                        sed -i 's|<database-url>|${STAGING_DATABASE_URL}|' deployment-${SERVICE_NAME}.yaml

                        # reapply

                        kubectl delete -f ./deployment-${SERVICE_NAME}.yaml --namespace=${NAMESPACE} || true 
                        kubectl apply -f ./deployment-${SERVICE_NAME}.yaml --namespace=${NAMESPACE}
                        '''
                    }
                }
            }
        }

        stage('Selenium/Cucumber Tests'){
          when {
              branch 'testing-cohort'
          }

          steps {
              script {
                  // require that all services are responsive
                  sh '''#!/bin/bash
                  bash -c '
                  TRIES_REMAINING=16

                  SERVICES=(
                      "https://api.skillstorm-congo.com/users"
                      "https://api.skillstorm-congo.com/taxes"
                      "https://api.skillstorm-congo.com/auth"
                      "https://api.skillstorm-congo.com/transactions"
                      "https://api.skillstorm-congo.com/accounts"
                      "https://api.skillstorm-congo.com/budgets"
                      "https://api.skillstorm-congo.com/buckets"
                      "https://api.skillstorm-congo.com/summarys"
                      "https://api.skillstorm-congo.com/api/credit"
                  )

                  # Function to check a single service, ignoring the status code
                  check_service() {
                      local service_url=$1
                      echo "Waiting for $service_url to be ready..."
                      local tries_remaining=$TRIES_REMAINING

                      while [ $tries_remaining -gt 0 ]; do
                          # Check if the service responds (ignoring the HTTP status code)
                          if curl --silent --output /dev/null "$service_url"; then
                              echo "***$service_url is ready***"
                              return 0
                          fi
                          
                          echo "waiting for $service_url..."
                          tries_remaining=$((tries_remaining - 1))
                          sleep 5
                      done

                      echo "$service_url did not start within expected time."
                      exit 1
                  }

                  for service in "${SERVICES[@]}"; do
                      check_service "$service"
                  done
                  '
                  '''

                  container('maven'){
                      withCredentials([string(credentialsId: 'CUCUMBER_TOKEN', variable: 'CUCUMBER_TOKEN')]) {
                          sh '''
                              ls
                              cd Budget-Buddy-Frontend-Testing/cucumber-selenium-tests
                              mvn test -Dheadless=true -Dcucumber.publish.token=${CUCUMBER_TOKEN} -DfrontendUrl=https://frontend.skillstorm-congo.com
                          '''
                      }
                  }
              }
          }
      }

        // Deploy the service to EKS for production
    stage('Deploy to EKS for Production') {
        when {
            branch 'testing-main'
        }

        steps {
            container('aws-kubectl') {
                withCredentials([
                    string(credentialsId: 'PROD_DATABASE_USER', variable: 'DATABASE_USERNAME'),
                    string(credentialsId: 'PROD_DATABASE_PASSWORD', variable: 'DATABASE_PASSWORD')])
                {
                    sh '''
                    aws eks --region us-east-1 update-kubeconfig --name project3-eks

                    # deploy service

                    cd Budget-Buddy-Kubernetes/Deployments/Services
                    # set prod image
                    sed -i "s/latest/latest/" deployment-${SERVICE_NAME}.yaml

                    # set prod DB url
                    # note use of | as delimiter because of forward slashes in the url
                    sed -i 's|<database-url>|${PROD_DATABASE_URL}|' deployment-${SERVICE_NAME}.yaml

                    # reapply

                    kubectl delete -f ./deployment-${SERVICE_NAME}.yaml --namespace=${NAMESPACE} || true 
                    kubectl apply -f ./deployment-${SERVICE_NAME}.yaml --namespace=${NAMESPACE}
                    '''
                }
            }
        }
    }
}
    
  
  // add functional, performance tests

  post {
    always {
        cleanWs()
    }

    success {
      script {
        handleSuccess()
      }
    }

    failure {
      script {
        handleFailure()
      }
    }
  }
}


// Function to handle success case
def handleSuccess() {
    if (env.BRANCH_NAME == "${TEST_BRANCH}") {
        def JWT = generateJWT()
        def GITHUB_TOKEN = retrieveAccessToken(JWT)
        createPullRequest(GITHUB_TOKEN)
    }
}

// Function to handle failure case
def handleFailure() {
    echo 'The pipeline failed. Reverting last PR.'
    def JWT = generateJWT()
    def GITHUB_TOKEN = retrieveAccessToken(JWT)
    revertLastPullRequest(GITHUB_TOKEN)
}

// Function to generate JWT
def generateJWT() {
    def now = sh(script: 'date +%s', returnStdout: true).trim()
    def iat = (now.toInteger() - 60).toString()
    def exp = (now.toInteger() + 600).toString()

    echo "Current time: ${now}"
    echo "Issued at: ${iat}"
    echo "Expires at: ${exp}"

    return sh(script: """
        #!/bin/bash
        client_id="${CLIENT_ID}"
        pem="${PEM}"
        iat="${iat}"
        exp="${exp}"
        b64enc() { openssl base64 -A | tr '+/' '-_' | tr -d '='; }
        header=\$(echo -n '{"typ":"JWT","alg":"RS256"}' | b64enc)
        payload=\$(echo -n "{\\"iat\\":\${iat},\\"exp\\":\${exp},\\"iss\\":\\"\${client_id}\\"}" | b64enc)
        header_payload="\${header}.\${payload}"

        pem_file=\$(mktemp)
        echo "\${pem}" > "\${pem_file}"

        signature=\$(echo -n "\${header_payload}" | openssl dgst -sha256 -sign "\${pem_file}" | b64enc)
        JWT="\${header_payload}.\${signature}"
        rm -f "\${pem_file}"
        echo "\${JWT}"
    """, returnStdout: true).trim()
}

// Function to retrieve access token
def retrieveAccessToken(JWT) {
    def tokenResponse = httpRequest(
        url: 'https://api.github.com/app/installations/54988601/access_tokens',
        httpMode: 'POST',
        customHeaders: [
            [name: 'Accept', value: '*/*'],
            [name: 'Authorization', value: "Bearer ${JWT}"],
        ],
        contentType: 'APPLICATION_JSON'
    )

    if (tokenResponse.status == 201) {
        def jsonResponse = readJSON text: tokenResponse.content
        echo "Access token ${jsonResponse.token} created."
        return jsonResponse.token
    } else {
        error 'Access token retrieval failed, aborting pipeline'
    }
}

// Function to create pull request
def createPullRequest(GITHUB_TOKEN) {
    def pullResponse = httpRequest(
        url: "https://api.github.com/repos/My-Budget-Buddy/Budget-Buddy-${PASCAL_SERVICE_NAME}/pulls",
        httpMode: 'POST',
        customHeaders: [
            [name: 'Accept', value: '*/*'],
            [name: 'Authorization', value: "Bearer ${GITHUB_TOKEN}"],
        ],
        contentType: 'APPLICATION_JSON',
        requestBody: """
            {
                "title": "Automated PR: Pipeline successful",
                "head": "${TEST_BRANCH}",
                "base": "${MAIN_BRANCH}",
                "body": "This pull request was created automatically after a successful pipeline run."
            }
        """
    )

    if (pullResponse.status == 201) {
        def jsonResponse = readJSON text: pullResponse.content
        int prNumber = jsonResponse.number
        echo "PR #${prNumber} created."
        requestReviewers(GITHUB_TOKEN, prNumber)
    } else {
        echo "Failed to create PR. Status: ${pullResponse.status}"
    }
}

// Function to request reviewers for the pull request
def requestReviewers(GITHUB_TOKEN, prNumber) {
    def reviewerResponse = httpRequest(
        url: "https://api.github.com/repos/My-Budget-Buddy/Budget-Buddy-${PASCAL_SERVICE_NAME}/pulls/${prNumber}/requested_reviewers",
        httpMode: 'POST',
        customHeaders: [
            [name: 'Accept', value: 'application/vnd.github+json'],
            [name: 'Authorization', value: "Bearer ${GITHUB_TOKEN}"],
            [name: 'X-GitHub-Api-Version', value: '2022-11-28']
        ],
        contentType: 'APPLICATION_JSON',
        requestBody: """
            {
                "reviewers": [${REVIEWER_GITHUB_USERNAMES}]
            }
        """
    )

    if (reviewerResponse.status == 201) {
        echo "Reviewers requested for PR #${prNumber}."
    } else {
        echo "Failed to request reviewers for PR #${prNumber}. Status: ${reviewerResponse.status}"
    }
}

// Function to revert last pull request
def revertLastPullRequest(GITHUB_TOKEN) {
    def getPullResponse = httpRequest(
        url: "https://api.github.com/repos/My-Budget-Buddy/Budget-Buddy-${PASCAL_SERVICE_NAME}/commits/${env.GIT_COMMIT}/pulls",
        httpMode: 'GET',
        customHeaders: [
            [name: 'Accept', value: '*/*'],
            [name: 'Authorization', value: "Bearer ${GITHUB_TOKEN}"],
        ],
        contentType: 'APPLICATION_JSON'
    )

    if (getPullResponse.status == 200) {
        def jsonResponse = readJSON text: getPullResponse.content
        def pullRequest = jsonResponse[0]
        def prNumber = pullRequest.number
        def prNodeId = pullRequest.node_id
        def prTitle = pullRequest.title
        def prAuthor = pullRequest.user.login

        echo "Retrieved last PR #${prNumber}."

        def revertResponse = revertPullRequest(prNumber, prNodeId, prTitle, GITHUB_TOKEN)
        handleRevertResponse(revertResponse, prNumber, prAuthor, GITHUB_TOKEN)
    } else {
        error "Failed to retrieve last PR. Status: ${getPullResponse.status}"
    }
}

// Function to revert the pull request via GraphQL
def revertPullRequest(prNumber, prNodeId, prTitle, GITHUB_TOKEN) {
    return httpRequest(
        url: 'https://api.github.com/graphql',
        httpMode: 'POST',
        customHeaders: [
            [name: 'Accept', value: '*/*'],
            [name: 'Authorization', value: "Bearer ${GITHUB_TOKEN}"],
        ],
        contentType: 'APPLICATION_JSON',
        requestBody: """
            {
                "query": "mutation RevertPullRequest { \
                    revertPullRequest( \
                        input: { \
                            pullRequestId: \\"${prNodeId}\\", \
                            title: \\"Automated PR: Revert '${prTitle}' on failed pipeline run\\", \
                            draft: false, \
                            body: \\"This pull request was created automatically after a failed pipeline run. This pull request reverts PR #${prNumber}.\\" \
                        } \
                    ) { \
                        revertPullRequest { \
                            createdAt \
                            id \
                            number \
                            state \
                            title \
                            url \
                        } \
                        pullRequest { \
                            baseRefOid \
                            createdAt \
                            headRefOid \
                            id \
                            number \
                            state \
                            title \
                            url \
                        } \
                    } \
                }"
            }
        """
    )
}
// Function to handle the revert response
def handleRevertResponse(revertResponse, prNumber, prAuthor, GITHUB_TOKEN) {
    if (revertResponse.status == 400) {
        def jsonResponse = readJSON text: revertResponse.content
        echo "Failed to revert PR #${prNumber}. ${jsonResponse.errors[0].message}"
    } else if (revertResponse.status == 200) {
        def jsonResponse = readJSON text: revertResponse.content
        if (jsonResponse.errors != null) {
            error "Failed to revert PR #${prNumber}. ${jsonResponse.errors[0].message}"
        } else {
            echo "PR #${prNumber} reverted."
            requestReviewersForRevert(prAuthor, GITHUB_TOKEN, jsonResponse)
        }
    } else {
        error 'GraphQL request failed, aborting pipeline'
    }
}

// Function to request reviewers for the reverted pull request
def requestReviewersForRevert(prAuthor, GITHUB_TOKEN, jsonResponse) {
    def revertPrNumber = jsonResponse.data.revertPullRequest.revertPullRequest.number
    def revertReviewers = "${REVIEWER_GITHUB_USERNAMES}"

    // Convert the comma-separated string into a list of trimmed usernames (removing quotes and extra spaces)
    def reviewerList = revertReviewers.split(',').collect { it.trim().replaceAll('"', '') }

    // Check if prAuthor is not already in the list
    if (!reviewerList.contains(prAuthor) && prAuthor != null && prAuthor != 'jenkins_budgetbuddy') {
        revertReviewers += ", \"${prAuthor}\""
    }

    def revertRequestResponse = httpRequest(
        url: "https://api.github.com/repos/My-Budget-Buddy/Budget-Buddy-${PASCAL_SERVICE_NAME}/pulls/${revertPrNumber}/requested_reviewers",
        httpMode: 'POST',
        customHeaders: [
            [name: 'Accept', value: 'application/vnd.github+json'],
            [name: 'Authorization', value: "Bearer ${GITHUB_TOKEN}"],
            [name: 'X-GitHub-Api-Version', value: '2022-11-28']
        ],
        contentType: 'APPLICATION_JSON',
        requestBody: """
            {
                "reviewers": [${revertReviewers}]
            }
        """
    )

    if (revertRequestResponse.status == 201) {
        echo "Reviewers requested for revert PR #${revertPrNumber}."
    } else {
        echo "Failed to request reviewers for revert PR #${revertPrNumber}. Status: ${revertRequestResponse.status}"
    }
}
